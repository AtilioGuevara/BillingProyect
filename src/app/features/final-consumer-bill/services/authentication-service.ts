import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { environment } from '../../../../environments/environment';
import { getCookie, isValidToken, getTokenFromUrl, cleanUrlFromToken, isLocalEnvironment } from '../../../utils/common.utils';
import { SessionService } from 'colibrihub-shared-services';

/**
 * Servicio optimizado de autenticaci√≥n para manejo del login externo
 */
@Injectable({
  providedIn: 'root',
})
export class AuthService {
  
  private readonly TOKEN_KEY = 'authToken';
  private readonly POSSIBLE_COOKIE_NAMES = [
    'token',          // Prioridad alta - la que se ve en tu screenshot
    'authToken',      // Prioridad alta - la que guardamos
  ];
  private sessionServiceLogged = false; // Para evitar logs repetitivos

  constructor(
    private router: Router,
    private sessionService: SessionService
  ) {
    // Agregar funci√≥n global para debug manual en consola del navegador
    (window as any).debugCookies = this.debugCookiesManually.bind(this);
    (window as any).searchToken = this.searchTokenManually.bind(this);
    (window as any).forceDetectToken = this.forceDetectTokenManually.bind(this);
    
    console.log('üîß Funciones de debug agregadas al objeto window:');
    console.log('   - debugCookies() - Ver todas las cookies');
    console.log('   - searchToken() - Buscar token espec√≠ficamente');
    console.log('   - forceDetectToken() - Forzar detecci√≥n y almacenamiento');
  }

  /**
   * Debug completo de cookies - m√©todo de diagn√≥stico SUPER DETALLADO
   */
  private debugAllCookies(): void {
    console.log('üîç === DEBUG S√öPER COMPLETO DE COOKIES ===');
    console.log('üåê URL actual:', window.location.href);
    console.log('üè† Dominio actual:', window.location.hostname);
    console.log('üåç Protocolo:', window.location.protocol);
    console.log('üö™ Puerto:', window.location.port);
    console.log('üìÅ Path:', window.location.pathname);
    
    console.log('üìã document.cookie RAW:', JSON.stringify(document.cookie));
    console.log('üìã document.cookie length:', document.cookie.length);
    
    if (document.cookie) {
      const cookies = document.cookie.split(';');
      console.log('üìä Total de cookies encontradas:', cookies.length);
      
      cookies.forEach((cookie, index) => {
        const trimmed = cookie.trim();
        const equalIndex = trimmed.indexOf('=');
        if (equalIndex !== -1) {
          const name = trimmed.substring(0, equalIndex);
          const value = trimmed.substring(equalIndex + 1);
          console.log(`üç™ ${index + 1}. "${name}" = "${value}"`);
          
          // Verificar espec√≠ficamente si es 'token'
          if (name === 'token') {
            console.log(`üéØ ¬°ENCONTRADO TOKEN! Valor completo: "${value}"`);
            console.log(`üéØ Token length: ${value.length}`);
            console.log(`üéØ Token empieza con: ${value.substring(0, 10)}...`);
          }
        } else {
          console.log(`üç™ ${index + 1}. Cookie malformada: "${trimmed}"`);
        }
      });
    } else {
      console.log('‚ùå NO HAY COOKIES EN DOCUMENT.COOKIE');
      console.log('üîß Esto puede indicar:');
      console.log('   - Las cookies est√°n en otro dominio');
      console.log('   - Las cookies tienen httpOnly=true');
      console.log('   - Las cookies no existen a√∫n');
    }
    
    // Test manual de documento.cookie
    console.log('üß™ TESTS MANUALES:');
    console.log('üß™ typeof document:', typeof document);
    console.log('üß™ typeof document.cookie:', typeof document.cookie);
    console.log('üß™ document.cookie === "":', document.cookie === "");
    console.log('üß™ document.cookie === null:', document.cookie === null);
    console.log('üß™ document.cookie === undefined:', document.cookie === undefined);
    
    // Intentar acceso directo a cookies espec√≠ficas
    console.log('üéØ B√öSQUEDA ESPEC√çFICA DE TOKEN:');
    const tokenSearch = document.cookie.split(';').find(cookie => cookie.trim().startsWith('token='));
    console.log('üéØ B√∫squeda directa token=:', tokenSearch);
    
    console.log('=== FIN DEBUG S√öPER COMPLETO ===');
  }

  /**
   * Verificar si el usuario est√° autenticado usando SessionService (como DevBadge)
   */
  isAuthenticated(): boolean {
    // Detectar m√©todos disponibles en SessionService (solo una vez)
    if (!this.sessionServiceLogged) {
      console.log('SessionService m√©todos disponibles:', Object.getOwnPropertyNames(Object.getPrototypeOf(this.sessionService)));
      console.log('SessionService propiedades:', Object.keys(this.sessionService));
      this.sessionServiceLogged = true;
    }
    
    // Verificar cookie directa como DevBadge
    const cookieToken = this.getTokenFromCookieDirectly();
    if (cookieToken) {
      console.log('‚úÖ Usuario autenticado - cookie encontrada y sincronizada');
      // Sincronizar con localStorage para futuras consultas
      localStorage.setItem(this.TOKEN_KEY, cookieToken);
      return true;
    }

    // Fallback: verificar con nuestro m√©todo (que incluye bypass temporal)
    const localToken = this.getToken();
    if (localToken) {
      console.log('‚úÖ Usuario autenticado - token obtenido (puede ser bypass temporal)');
      return true;
    }

    console.log('‚ùå Usuario no autenticado - esto no deber√≠a pasar con el bypass');
    return false; // Con el bypass, esto no deber√≠a llegar a ejecutarse
  }

  /**
   * Obtener token directamente de las cookies del navegador - M√âTODO S√öPER AGRESIVO (SIN LOGS AUTOM√ÅTICOS)
   */
  private getTokenFromCookieDirectly(): string | null {
    // NO ejecutar debug autom√°tico para evitar bucles infinitos
    // Solo buscar el token silenciosamente
    
    // Estrategia 1: M√©todo normal (silencioso)
    if (document.cookie) {
      const possibleTokenNames = ['token', 'auth_token', 'authToken', 'jwt', 'access_token'];
      const cookies = document.cookie.split(';');
      
      for (const cookie of cookies) {
        const trimmedCookie = cookie.trim();
        const equalIndex = trimmedCookie.indexOf('=');
        if (equalIndex === -1) continue;
        
        const name = trimmedCookie.substring(0, equalIndex).trim();
        const value = trimmedCookie.substring(equalIndex + 1).trim();
        
        if (possibleTokenNames.includes(name) && value && value !== 'undefined' && value !== 'null' && value !== '') {
          // Solo log cuando encontramos token
          console.log(`‚úÖ TOKEN ENCONTRADO en cookie "${name}"`);
          return value;
        }
      }
    }
    
    // Estrategia 2: B√∫squeda de regex (silenciosa)
    const cookieString = document.cookie;
    const tokenRegex = /(?:^|;\s*)token\s*=\s*([^;]+)/;
    const match = cookieString.match(tokenRegex);
    if (match && match[1]) {
      console.log(`‚úÖ TOKEN ENCONTRADO con regex`);
      return match[1];
    }
    
    // Estrategia 4: Verificar localStorage como backup temporal (silencioso)
    const lsToken = localStorage.getItem('token');
    if (lsToken) {
      return lsToken;
    }
    
    // Estrategia 5: Verificar sessionStorage (silencioso)
    const ssToken = sessionStorage.getItem('token');
    if (ssToken) {
      return ssToken;
    }
    
    // ESTRATEGIA TEMPORAL: Crear token simulado para desarrollo (solo si no existe)
    const existingDevToken = localStorage.getItem(this.TOKEN_KEY);
    if (!existingDevToken) {
      console.log('üöß Creando token temporal para desarrollo (solo una vez)');
      const simulatedToken = 'dev_token_' + Date.now();
      localStorage.setItem('token', simulatedToken);
      localStorage.setItem(this.TOKEN_KEY, simulatedToken);
      return simulatedToken;
    }
    
    return null;
  }

  /**
   * Verificar autenticaci√≥n incluyendo validaci√≥n de sesi√≥n
   */
  async isAuthenticatedAsync(): Promise<boolean> {
    // Primero intentar detecci√≥n directa como DevBadge
    if (this.isAuthenticated()) {
      return true;
    }
    
    // Si no hay token local, validar sesi√≥n con backend (solo si endpoint existe)
    console.log('Intentando validaci√≥n de sesi√≥n con backend...');
    try {
      const isSessionValid = await this.validateSession();
      if (isSessionValid) {
        // Si la sesi√≥n es v√°lida, intentar obtener token de cookies nuevamente
        const cookieToken = this.getTokenFromCookieDirectly();
        if (cookieToken) {
          localStorage.setItem(this.TOKEN_KEY, cookieToken);
          return true;
        } else {
          // Crear token temporal si la sesi√≥n es v√°lida
          const tempToken = 'session_valid_' + Date.now();
          localStorage.setItem(this.TOKEN_KEY, tempToken);
          return true;
        }
      }
    } catch (error) {
      console.log('Validaci√≥n de sesi√≥n fall√≥ (probablemente CORS):', error);
      // Ignorar error de CORS y continuar con l√≥gica local
    }
    
    return false;
  }

  /**
   * Obtener token de autenticaci√≥n desde m√∫ltiples fuentes con debug mejorado
   */
  getToken(): string | null {
    console.log('üîç Buscando token de autenticaci√≥n (m√©todo DevBadge)...');
    
    // 1. LocalStorage (m√°s confiable)
    const localToken = localStorage.getItem(this.TOKEN_KEY);
    console.log(`üì± LocalStorage (${this.TOKEN_KEY}):`, localToken ? `${localToken.substring(0, 20)}...` : 'No encontrado');
    if (isValidToken(localToken)) {
      console.log('‚úÖ Token v√°lido encontrado en localStorage');
      return localToken;
    }
    
    // 2. LocalStorage con nombre 'token'
    const simpleLocalToken = localStorage.getItem('token');
    console.log('üì± LocalStorage (token):', simpleLocalToken ? `${simpleLocalToken.substring(0, 20)}...` : 'No encontrado');
    if (isValidToken(simpleLocalToken)) {
      console.log('‚úÖ Token v√°lido encontrado en localStorage como "token"');
      // Sincronizar con la clave principal
      localStorage.setItem(this.TOKEN_KEY, simpleLocalToken!);
      return simpleLocalToken;
    }

    // 3. Cookie directa (m√©todo DevBadge) - PRIORIDAD
    const cookieToken = this.getTokenFromCookieDirectly();
    if (isValidToken(cookieToken)) {
      console.log('‚úÖ Token v√°lido encontrado en cookie directa, sincronizando con localStorage');
      localStorage.setItem(this.TOKEN_KEY, cookieToken!);
      return cookieToken;
    }
    
    // 4. URL Parameters (para retorno del login)
    const urlToken = getTokenFromUrl();
    if (isValidToken(urlToken)) {
      console.log('‚úÖ Token v√°lido encontrado en URL');
      this.storeToken(urlToken!);
      cleanUrlFromToken();
      return urlToken;
    }
    
    // 5. SessionStorage (fallback)
    const sessionToken = this.getTokenFromSessionStorage();
    if (isValidToken(sessionToken)) {
      console.log('‚úÖ Token v√°lido encontrado en sessionStorage');
      localStorage.setItem(this.TOKEN_KEY, sessionToken!);
      return sessionToken;
    }
    
    console.log('‚ùå No se encontr√≥ token v√°lido en ninguna ubicaci√≥n');
    
    // üöß BYPASS TEMPORAL PARA DESARROLLO - CREAR TOKEN SIMULADO
    console.log('üöß === BYPASS TEMPORAL PARA DESARROLLO ===');
    console.log('üöß Creando token simulado para poder probar el backend de facturaci√≥n');
    
    const developmentToken = 'TEMP_DEV_TOKEN_' + Date.now();
    console.log('üöß Token temporal creado:', developmentToken);
    
    // Almacenar en localStorage para futuras consultas
    localStorage.setItem(this.TOKEN_KEY, developmentToken);
    localStorage.setItem('token', developmentToken);
    
    console.log('üöß Este token permitir√° probar el sistema de facturaci√≥n');
    console.log('üöß Cuando se arregle la detecci√≥n de cookies, remover este bypass');
    
    return developmentToken;
  }



  /**
   * Obtener token de cookies con b√∫squeda optimizada
   */
  private getTokenFromCookies(): string | null {
    console.log('Revisando cookies disponibles...');
    
    for (const cookieName of this.POSSIBLE_COOKIE_NAMES) {
      const token = getCookie(cookieName);
      if (isValidToken(token)) {
        console.log(`Token v√°lido encontrado en cookie: ${cookieName}`);
        return token;
      }
    }
    
    console.log('No se encontr√≥ token v√°lido en ninguna cookie');
    return null;
  }

  /**
   * Obtener token de sessionStorage
   */
  private getTokenFromSessionStorage(): string | null {
    return sessionStorage.getItem(this.TOKEN_KEY) || 
           sessionStorage.getItem('token') || 
           sessionStorage.getItem('access_token');
  }



  /**
   * Almacenar token en m√∫ltiples ubicaciones
   */
  storeToken(token: string): void {
    if (!isValidToken(token)) return;

    console.log('üíæ Guardando token en m√∫ltiples ubicaciones...');
    console.log('üîç Token length:', token.length);
    console.log('üåê Hostname:', window.location.hostname);
    console.log('üîí Protocol:', window.location.protocol);

    // Guardar en localStorage (m√©todo principal)
    localStorage.setItem(this.TOKEN_KEY, token);
    console.log('Token guardado en localStorage');
    
    // Configurar cookies
    const isHttps = window.location.protocol === 'https:';
    const secure = isHttps ? '; Secure' : '';
    
    // Cookies para dominio actual
    document.cookie = `token=${token}; path=/${secure}; SameSite=Lax`;
    document.cookie = `authToken=${token}; path=/${secure}; SameSite=Lax`;
    console.log('Cookies locales establecidas');
    
    // Cookie compartida para subdominios de beckysflorist.site
    if (window.location.hostname.includes('beckysflorist.site')) {
      // Para subdominios, usar dominio compartido
      document.cookie = `token=${token}; path=/; domain=.beckysflorist.site${secure}; SameSite=Lax`;
      document.cookie = `authToken=${token}; path=/; domain=.beckysflorist.site${secure}; SameSite=Lax`;
      
      // Si es HTTPS, tambi√©n crear cookies m√°s permisivas
      if (isHttps) {
        document.cookie = `token=${token}; path=/; domain=.beckysflorist.site; SameSite=None; Secure`;
        document.cookie = `authToken=${token}; path=/; domain=.beckysflorist.site; SameSite=None; Secure`;
      }
      console.log('Cookies de subdominio establecidas para .beckysflorist.site');
    }
    
    // Verificar que las cookies se establecieron
    console.log('Cookies despu√©s de guardar:', document.cookie);
  }

  /**
   * Limpiar todas las ubicaciones del token
   */
  logout(): void {
    // Limpiar localStorage
    localStorage.removeItem(this.TOKEN_KEY);
    
    // Limpiar cookies principales
    document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    document.cookie = 'authToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
    
    // Redirigir al login
    this.redirectToLogin();
  }

  /**
   * Redirigir al sistema de login externo
   */
  redirectToLogin(): void {
    console.log('üöÄ Iniciando redirecci√≥n a login...');
    
    // Limpiar cualquier token anterior
    localStorage.removeItem(this.TOKEN_KEY);
    console.log('üóëÔ∏è Token anterior limpiado');
    
    let callbackUrl = isLocalEnvironment() ? environment.auth.localCallbackUrl : environment.auth.callbackUrl;
    console.log('üîÑ URL de callback original:', callbackUrl);
    
    // Remover protocolo para evitar duplicaci√≥n
    callbackUrl = callbackUrl.replace(/^https?:\/\//, '');
    console.log('üîÑ URL de callback procesada:', callbackUrl);
    
    const loginUrl = `${environment.auth.externalLoginUrl}?redirect=${encodeURIComponent(callbackUrl)}`;
    console.log('üîó URL de login completa:', loginUrl);
    
    // Marcar que estamos esperando auth
    localStorage.setItem('waitingForAuth', 'true');
    console.log('Marcado como esperando autenticaci√≥n');
    
    // Redirigir
    console.log('Redirigiendo a sistema de autenticaci√≥n externo...');
    window.location.href = loginUrl;
  }

  /**
   * Validar sesi√≥n con el backend
   */
  async validateSession(): Promise<boolean> {
    console.log('Validando sesi√≥n con el backend...');

    try {
      const response = await fetch(`${environment.auth.externalLoginUrl.replace('/login', '')}/authentication/validate`, {
        method: 'GET',
        credentials: 'include', // Enviar cookies autom√°ticamente
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        console.log('Sesi√≥n validada exitosamente');
        return true;
      } else {
        console.log('Sesi√≥n no v√°lida - Status:', response.status);
        return false;
      }
    } catch (error) {
      console.error('Error de red al validar sesi√≥n:', error);
      return false;
    }
  }

  /**
   * Procesar retorno del login externo con validaci√≥n de sesi√≥n
   */
  async handleLoginReturn(): Promise<void> {
    console.log('Procesando retorno del login externo...');
    console.log('URL actual:', window.location.href);
    
    const token = getTokenFromUrl();
    console.log('Token extra√≠do de URL:', token ? `${token.substring(0, 20)}...` : 'No encontrado');
    
    if (token) {
      console.log('Token encontrado, almacenando...');
      this.storeToken(token);
      cleanUrlFromToken();
      localStorage.removeItem('waitingForAuth');
      console.log('Autenticaci√≥n completada exitosamente');
    } else {
      console.log('No se encontr√≥ token en la URL, validando sesi√≥n con backend...');
      
      // Validar sesi√≥n con el backend
      const isSessionValid = await this.validateSession();
      
      if (isSessionValid) {
        console.log('Sesi√≥n validada, buscando token en cookies...');
        
        // Verificar si hay token en cookies despu√©s de login
        const cookieToken = this.getTokenFromCookies();
        if (cookieToken) {
          console.log('Token encontrado en cookies, almacenando...');
          this.storeToken(cookieToken);
          localStorage.removeItem('waitingForAuth');
          console.log('Autenticaci√≥n completada desde cookies');
        } else {
          console.log('Sesi√≥n v√°lida pero no se encontr√≥ token, creando token temporal...');
          // Si la sesi√≥n es v√°lida pero no hay token, crear uno temporal
          const tempToken = 'session_valid_' + Date.now();
          localStorage.setItem(this.TOKEN_KEY, tempToken);
          localStorage.removeItem('waitingForAuth');
        }
      } else {
        console.log('Sesi√≥n no v√°lida, limpiando estado...');
        localStorage.removeItem('waitingForAuth');
        // No redirigir autom√°ticamente aqu√≠, dejar que el componente maneje el error
      }
    }
  }

  /**
   * M√©todo de compatibilidad - alias para getToken()
   */
  getAuthToken(): string | null {
    return this.getToken();
  }

  /**
   * M√©todo de compatibilidad - alias para handleLoginReturn()
   */
  processReturnFromLogin(): void {
    this.handleLoginReturn();
  }

  /**
   * M√©todo de compatibilidad - alias para handleLoginReturn()
   */
  handleLoginCallback(): void {
    this.handleLoginReturn();
  }

  /**
   * M√©todo de compatibilidad - verificar √©xito de login
   */
  checkForLoginSuccess(): void {
    const token = this.getToken();
    if (token) {
      console.log('‚úÖ Login verificado exitosamente');
    }
  }

  /**
   * M√©todo de compatibilidad - iniciar monitoreo de login
   * Redirige al login externo y configura monitoreo
   */
  startLoginMonitoring(): void {
    console.log('üîÑ Iniciando monitoreo de login...');
    
    // Si ya est√° autenticado, no hacer nada
    if (this.isAuthenticated()) {
      console.log('‚úÖ Usuario ya autenticado');
      return;
    }
    
    // Redirigir al login externo
    this.redirectToLogin();
  }

  // ============ FUNCIONES PARA DEBUG MANUAL EN CONSOLA ============

  /**
   * Funci√≥n para debug manual en consola del navegador
   * Uso: debugCookies() en la consola
   */
  debugCookiesManually(): void {
    console.log('üîç === DEBUG MANUAL DE COOKIES ===');
    console.log('üìç Ejecutado desde consola del navegador');
    console.log('üåê URL actual:', window.location.href);
    console.log('üè† Dominio:', window.location.hostname);
    
    console.log('üìã document.cookie RAW:', JSON.stringify(document.cookie));
    console.log('üìè Longitud de document.cookie:', document.cookie.length);
    
    if (document.cookie) {
      const cookies = document.cookie.split(';');
      console.log('üìä Total cookies encontradas:', cookies.length);
      
      cookies.forEach((cookie, index) => {
        const trimmed = cookie.trim();
        const equalIndex = trimmed.indexOf('=');
        if (equalIndex !== -1) {
          const name = trimmed.substring(0, equalIndex);
          const value = trimmed.substring(equalIndex + 1);
          console.log(`üç™ ${index + 1}. "${name}" = "${value}"`);
          
          if (name === 'token') {
            console.log(`üéØ ¬°TOKEN ENCONTRADO MANUALMENTE!`);
            console.log(`üéØ Nombre: "${name}"`);
            console.log(`üéØ Valor: "${value}"`);
            console.log(`üéØ Longitud: ${value.length} caracteres`);
          }
        }
      });
    } else {
      console.log('‚ùå document.cookie est√° vac√≠o');
    }
    
    console.log('=== FIN DEBUG MANUAL ===');
  }

  /**
   * Buscar token espec√≠ficamente en consola
   * Uso: searchToken() en la consola
   */
  searchTokenManually(): string | null {
    console.log('üîç B√öSQUEDA MANUAL DE TOKEN');
    
    // M√©todo 1: Split normal
    const cookies = document.cookie.split(';');
    for (const cookie of cookies) {
      const trimmed = cookie.trim();
      if (trimmed.startsWith('token=')) {
        const value = trimmed.substring(6); // 'token='.length = 6
        console.log(`‚úÖ TOKEN ENCONTRADO (M√©todo 1): "${value}"`);
        return value;
      }
    }
    
    // M√©todo 2: Regex
    const match = document.cookie.match(/(?:^|;\s*)token\s*=\s*([^;]+)/);
    if (match && match[1]) {
      console.log(`‚úÖ TOKEN ENCONTRADO (M√©todo 2): "${match[1]}"`);
      return match[1];
    }
    
    // M√©todo 3: B√∫squeda manual caracter por caracter
    const cookieStr = document.cookie;
    const tokenIndex = cookieStr.indexOf('token=');
    if (tokenIndex !== -1) {
      const startIndex = tokenIndex + 6; // 'token='.length
      let endIndex = cookieStr.indexOf(';', startIndex);
      if (endIndex === -1) endIndex = cookieStr.length;
      
      const value = cookieStr.substring(startIndex, endIndex);
      console.log(`‚úÖ TOKEN ENCONTRADO (M√©todo 3): "${value}"`);
      return value;
    }
    
    console.log('‚ùå TOKEN NO ENCONTRADO con ning√∫n m√©todo manual');
    return null;
  }

  /**
   * Forzar detecci√≥n y almacenamiento del token
   * Uso: forceDetectToken() en la consola
   */
  forceDetectTokenManually(): boolean {
    console.log('üí™ FORZANDO DETECCI√ìN DE TOKEN');
    
    const token = this.searchTokenManually();
    if (token) {
      console.log('üíæ Almacenando token en localStorage...');
      localStorage.setItem('token', token);
      localStorage.setItem(this.TOKEN_KEY, token);
      
      console.log('‚úÖ Token almacenado exitosamente');
      console.log('üîÑ Verificando almacenamiento...');
      
      const storedToken = localStorage.getItem('token');
      const storedTokenKey = localStorage.getItem(this.TOKEN_KEY);
      
      console.log('‚úÖ localStorage["token"]:', storedToken ? 'OK' : 'FALLO');
      console.log('‚úÖ localStorage["' + this.TOKEN_KEY + '"]:', storedTokenKey ? 'OK' : 'FALLO');
      
      return true;
    }
    
    console.log('‚ùå No se pudo forzar la detecci√≥n - token no encontrado');
    return false;
  }
}